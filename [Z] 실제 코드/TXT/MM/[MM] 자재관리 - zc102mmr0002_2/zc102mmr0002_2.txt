*&---------------------------------------------------------------------*
*& Report ZC102MMR0002_2
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zc102mmr0002_2.

*
*DATA: lt_data    TYPE TABLE OF zc102sdt0006,
*      ls_data    TYPE zc102sdt0006,
*      lv_partner TYPE zc102sdt0006-partner,
*      lv_index   TYPE i,
*      lv_char(1),
*      lt_matnr   TYPE TABLE OF zc102mmt0004,
*      ls_matnr   TYPE zc102mmt0004.
*
***********************************************************************
** BP번호 채우기
***********************************************************************
*" 2. PARTNER가 비어 있는 레코드 읽기
*SELECT *
*  FROM zc102sdt0006
*  WHERE partner IS INITIAL
*      INTO TABLE @lt_data.

*LOOP AT lt_data INTO ls_data.
*
*  IF ls_data-vbeln_so = 'SO1000000145'.
*    ls_data-partner = 'BP03'.
*  ELSEIF ls_data-vbeln_so = 'SO1000000148'.
*    ls_data-partner = 'BP05'.
*  ELSEIF ls_data-vbeln_so = 'SO1000000161'.
*    ls_data-partner = 'BP05'.
*  ELSEIF ls_data-vbeln_so = 'SO1000000163'.
*    ls_data-partner = 'BP02'.
*  ELSEIF ls_data-vbeln_so = 'SO1000000168'.
*    ls_data-partner = 'BP04'.
*  ENDIF.
*
*  MODIFY lt_data FROM ls_data TRANSPORTING partner.
*
*ENDLOOP.
*
*MODIFY zc102sdt0006 FROM TABLE lt_data.
*" 3. LOOP 하면서 랜덤 파트너 할당
*LOOP AT lt_data INTO ls_data.
*
*  CALL FUNCTION 'QF05_RANDOM_INTEGER'
*    EXPORTING
*      ran_int_max = 5
*      ran_int_min = 1
*    IMPORTING
*      ran_int     = lv_index.
*
*  lv_char = CONV char1( lv_index ).
*
*  lv_partner = |{ 'BP0' }{ lv_char }|.
*  " 인덱스는 1부터 시작하니 맞춰서 가져오기
*
*  ls_data-partner = lv_partner.
*  MODIFY zc102sdt0006 FROM ls_data.
*
*  IF sy-subrc EQ 0.
*    COMMIT WORK.
*  ELSE.
*    ROLLBACK WORK.
*  ENDIF.
*ENDLOOP.


**********************************************************************
* MTYPE 채우기
**********************************************************************
*SELECT *
*  INTO CORRESPONDING FIELDS OF TABLE lt_matnr
*  FROM zc102mmt0004
*  ORDER BY matnr.
*
*LOOP AT lt_matnr INTO ls_matnr.
*
*  IF ls_matnr-matnr = 'M0001'.
*    ls_matnr-mtype = 'F'.
*  ELSEIF ls_matnr-matnr = 'M0004'.
*    ls_matnr-mtype = 'F'.
*  ELSEIF ls_matnr-matnr = 'M0005'.
*    ls_matnr-mtype = 'F'.
*  ELSEIF ls_matnr-mtart = 'P'.
*    ls_matnr-mtype = 'M'.
*  ELSEIF ls_matnr-mtart = 'R'.
*    ls_matnr-mtype = 'F'.
*  ENDIF.
*
*  MODIFY lt_matnr FROM ls_matnr TRANSPORTING mtype.
*
*ENDLOOP.
*
*cl_demo_output=>display( lt_matnr ).
*
*MODIFY zc102mmt0004 FROM TABLE lt_matnr.

*-- 자재관리 테이블 업데이트
*DELETE FROM zc102mmt0001
*  WHERE matnr = 'M0001'
*    AND stlno = 'SL100'
*    AND stltype = 'P'
*    AND werks = 'P1000'.
**    AND aenam = 'LSYN-A-02'.
*
*UPDATE zc102mmt0004
*SET mtype = 'F'
*  WHERE matnr = 'M0005'.

*UPDATE zc102mmt0001
*SET labst = 5000
*  WHERE matnr = 'M0041'
*    AND stlno = 'SL'
*    AND stltype = 'P'
*    AND werks = 'P2000'.

*-- 전표 생성
DATA : lv_duedt     TYPE zc102fit0010-duedt,
       lv_fieldname TYPE fieldname,
       lv_month_idx(2) TYPE n,
       lv_month(2).

*-- 저장용 임시 테이블
DATA : ls_save_header TYPE zc102sdt0006,
       ls_save_item   TYPE zc102sdt0007.

DATA : BEGIN OF gs_header.
         INCLUDE TYPE zc102mmt0019. "BP-자재
DATA : END OF gs_header,
gt_header LIKE TABLE OF gs_header.

DATA : BEGIN OF gs_so.
         INCLUDE TYPE zc102sdt0006. "판매오더 헤더
DATA : END OF gs_so,
gt_so LIKE TABLE OF gs_so.

DATA : BEGIN OF gs_item.
         INCLUDE TYPE zc102sdt0007. "판매오더 라인 아이템
DATA : END OF gs_item,
gt_item LIKE TABLE OF gs_item.

CLEAR : gt_header.
*DATA : BEGIN OF gs_so2.
*         INCLUDE TYPE zc102sdt0004. "납품 헤더
*DATA : END OF gs_so2,
*gt_so2 LIKE TABLE OF gs_so2.
*
*DATA : gt_item2 TYPE TABLE OF zc102sdt0005, " 납품 아이템
*       gs_item2 TYPE zc102sdt0005.

SELECT * FROM zc102mmt0019 INTO TABLE gt_header WHERE contype = 'C'.

***********************************************************************
DATA: lv_range_nr TYPE inri-nrrangenr,
      lv_prefix   TYPE char3,
      lv_quantity TYPE inri-quantity,
      pv_sono     TYPE string.

lv_prefix = 'SO'.   " 판매오더 번호 prefix
lv_range_nr = '01'. " 번호 범위
lv_quantity = 1.

CALL METHOD zclc102cm_auto_sequence=>get_next_value
  EXPORTING
    pv_range_nr = lv_range_nr
    pv_prefix   = lv_prefix
    pv_quantity = lv_quantity
  IMPORTING
    pv_result   = pv_sono.

SELECT * FROM zc102mmt0019 INTO TABLE gt_header WHERE contype = 'C'.

SORT gt_header BY matnr ASCENDING.
LOOP AT gt_header INTO gs_header.

  DO 5 TIMES. " 월별 데이터 반복 처리 (01~05)

    lv_month_idx = sy-index.

    FIELD-SYMBOLS: <fs_qty> TYPE zc102e_mm_month.

    lv_fieldname = |MONTH{ lv_month_idx WIDTH = 2 PAD = '0' }|.

    ASSIGN COMPONENT lv_fieldname OF STRUCTURE gs_header TO <fs_qty>.
    IF sy-subrc <> 0 OR <fs_qty> IS INITIAL.
      CONTINUE.
    ENDIF.

    " 판매오더 번호 생성
    CLEAR: pv_sono.
    CALL METHOD zclc102cm_auto_sequence=>get_next_value
      EXPORTING
        pv_range_nr = '01'
        pv_prefix   = 'SO'
        pv_quantity = 1
      IMPORTING
        pv_result   = pv_sono.

    " 계산
    DATA(lv_netwr) = gs_header-stprs * <fs_qty>.
    DATA(lv_stax)  = lv_netwr * '0.10'.
    DATA(lv_final) = lv_netwr + lv_stax.

    " 지급기한 설정
    lv_month = |{ lv_month_idx WIDTH = 2 PAD = '0' }|.
    CONCATENATE gs_header-year_sd lv_month '01' INTO lv_duedt.
    lv_duedt = lv_duedt + 15.

    " 아이템 세팅
    CLEAR: gs_item.
    gs_item-vbeln_so  = pv_sono.
    gs_item-matnr     = gs_header-matnr.
    gs_item-partner   = gs_header-partner.
    gs_item-scost     = gs_header-stprs.
    gs_item-waers     = gs_header-waers.
    gs_item-pequan     = <fs_qty>.
    gs_item-meins     = gs_header-meins.
    APPEND gs_item TO gt_item.

    ls_save_item = CORRESPONDING #( gs_item ).
    ls_save_item = VALUE #( BASE ls_save_item
                              erdat = sy-datum
                              ernam = sy-uname
                              erzet = sy-uzeit
                              ).
    MODIFY zc102sdt0007 FROM ls_save_item.

    " 판매오더 헤더 세팅
    CLEAR: gs_so.
    gs_so-vbeln_so = pv_sono.
    gs_so-partner  = gs_header-partner.
    gs_so-netwr    = lv_netwr.
    gs_so-stax     = lv_stax.
    gs_so-finalsp  = lv_final.
    gs_so-waers    = gs_header-waers.
    gs_so-dismo    = '0'.

    APPEND gs_so TO gt_so.
    ls_save_header = CORRESPONDING #( gs_so ).
    ls_save_header = VALUE #( BASE ls_save_header
                              erdat = sy-datum
                              ernam = sy-uname
                              erzet = sy-uzeit
                              ).
    MODIFY zc102sdt0006 FROM ls_save_header.

    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
    ENDIF.

    " 회계 전표 호출
    IF gs_header-waers = 'KRW'.
      CALL FUNCTION 'ZFM_CL102_FI_06'
        EXPORTING
          iv_partner   = gs_so-partner
          iv_vbeln     = gs_so-vbeln_so
          iv_ar_wrbtr  = gs_so-finalsp
          iv_dc_wrbtr  = gs_so-dismo
          iv_wrbtr_vat = gs_so-stax
          iv_wrbtr     = gs_so-netwr
          iv_duedt     = lv_duedt.

      CALL FUNCTION 'ZFM_CL102_FI_11'
        EXPORTING
          iv_vbeln = gs_so-vbeln_so
        TABLES
          it_matnr = gt_item.

    ELSE.
      CALL FUNCTION 'ZFM_CL102_FI_07'
        EXPORTING
          iv_waers   = gs_so-waers
          iv_wrbtr   = gs_so-netwr
          iv_partner = gs_so-partner
          iv_vbeln   = gs_so-vbeln_so
          iv_duedt   = lv_duedt.

      CALL FUNCTION 'ZFM_CL102_FI_11'
        EXPORTING
          iv_vbeln = gs_so-vbeln_so
        TABLES
          it_matnr = gt_item.
    ENDIF.



  ENDDO. " 각 월별

ENDLOOP. " 자재별
*
**-- 2025 판매오더 삭제 (판매오더 헤더, 아이템, 납품오더 헤더, 아이템, 전표 헤더, 아이템 삭제 로직)
*DATA: lt_vbeln_so TYPE TABLE OF zc102sdt0006,
*      lt_belnr    TYPE TABLE OF zc102fit0010.
*
**-- Step 1: AUDAT 기준 VBELN_SO 추출
*SELECT vbeln_so
*  INTO TABLE lt_vbeln_so
*  FROM zc102sdt0006
*  WHERE audat >= '20250101'.
*
*CHECK lt_vbeln_so IS NOT INITIAL.
*
**-- Step 2: BELNR 추출 (전표라인)
*SELECT belnr
*  INTO TABLE lt_belnr
*  FROM zc102fit0010
*  FOR ALL ENTRIES IN lt_vbeln_so
*  WHERE vbeln = lt_vbeln_so-vbeln_so.
*
*LOOP AT lt_vbeln_so INTO DATA(ls_vbeln_so).
*  DELETE FROM zc102sdt0007
*  WHERE vbeln_so = ls_vbeln_so-vbeln_so.
*
*  DELETE FROM zc102sdt0004
*  WHERE vbeln_so = ls_vbeln_so-vbeln_so.
*
*  DELETE FROM zc102sdt0005
*  WHERE vbeln_so = ls_vbeln_so-vbeln_so.
*
*ENDLOOP.
*
*LOOP AT lt_belnr INTO DATA(ls_belnr).
*
*  DELETE FROM zc102fit0010
*  WHERE belnr = ls_belnr-belnr.
*
*  DELETE FROM zc102fit0009
*  WHERE belnr = ls_belnr-belnr.
*
*ENDLOOP.

----------------------------------------------------------------------------------
Extracted by Direct Download Enterprise version 1.3.1 - E.G.Mellodew. 1998-2005 UK. Sap Release 758
