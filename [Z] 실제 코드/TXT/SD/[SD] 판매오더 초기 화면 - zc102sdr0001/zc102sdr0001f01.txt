*&---------------------------------------------------------------------*
*& Include          ZC102SDR0001F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form search_clicked_node_info
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> NODE_KEY
*&---------------------------------------------------------------------*
FORM search_clicked_node_info  USING    p_node_key.



ENDFORM.
*&---------------------------------------------------------------------*
*& Form fill_tree_info
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_tree_info .

  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE gt_forcast
    FROM zc102sdt0008
   ORDER BY year_sd quart_sd month_sd matnr.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form fill_alv_info
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_alv_info .



ENDFORM.
*&---------------------------------------------------------------------*
*& Form display_screen
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_screen .

  IF go_left_cont IS NOT BOUND.

*    CLEAR : gt_fcat, gs_fcat.
*    PERFORM set_fcat USING : 'X' 'YEAR_SD' 'ZC102SDT0008' 'C' ' '.


    PERFORM create_object.
    PERFORM register_tree_event.
    PERFORM build_node.

    CALL METHOD go_tree->add_nodes
      EXPORTING
        table_structure_name = 'MTREESNODE'
        node_table           = node_table.

    CALL METHOD go_tree->expand_node
      EXPORTING
        node_key = 'ROOT'.

    PERFORM set_layout.

*    CALL METHOD go_alv_grid->set_table_for_first_display
*      EXPORTING
*        i_save          = 'A'
*        i_default       = 'X'
*        is_layout       = gs_layout
*      CHANGING
*        it_outtab       = gt_forcast
*        it_fieldcatalog = gt_fcat.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_fcat
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_
*&      --> P_
*&      --> P_
*&      --> P_
*&      --> P_
*&---------------------------------------------------------------------*
FORM set_fcat  USING  pv_key pv_field pv_table pv_just pv_emph.

  gs_fcat-key       = pv_key.
  gs_fcat-fieldname = pv_field.
  gs_fcat-ref_table = pv_table.
  gs_fcat-just      = pv_just.
  gs_fcat-emphasize = pv_emph.

  APPEND gs_fcat TO gt_fcat.
  CLEAR gs_fcat.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form create_object
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM create_object .


  CREATE OBJECT go_container
    EXPORTING
      repid     = sy-repid
      dynnr     = sy-dynnr
      side      = cl_gui_docking_container=>dock_at_left
      extension = 5000.

  CREATE OBJECT go_base_cont
    EXPORTING
      parent        = go_container
      orientation   = 1 " 0 : Vertical, 1 : Horizontal
      sash_position = 20
      with_border   = 1.

*-- Assign container
  go_left_cont   = go_base_cont->top_left_container.
  go_right_cont  = go_base_cont->bottom_right_container.

  CREATE OBJECT go_tree
    EXPORTING
      parent              = go_left_cont
      node_selection_mode = cl_gui_simple_tree=>node_sel_mode_single.

*-- Assign Chart

  CREATE OBJECT go_chart
    EXPORTING
      parent = go_right_cont.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form register_tree_event
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM register_tree_event .


  event-eventid = cl_gui_simple_tree=>eventid_node_double_click.
  event-appl_event = 'X'.
  APPEND event TO events.

  CALL METHOD go_tree->set_registered_events
    EXPORTING
      events                    = events
    EXCEPTIONS
      cntl_error                = 1
      cntl_system_error         = 2
      illegal_event_combination = 3
      OTHERS                    = 4.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  SET HANDLER lcl_tree_event_handler=>handle_node_double_click FOR go_tree.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form build_node
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM build_node .


  DATA: node    TYPE mtreesnode,
        lv_year TYPE zc102sdt0008-year_sd,
        lv_text(10).

*-- 루트 노드
  node-node_key   = 'ROOT'.
  node-text       = '수요예측'.
  node-isfolder   = 'X'.
*  node-n_image    = '@06@'.   " 접은 이미지
*  node-exp_image  = '@07@'.   " 펼친 이미지
  node-n_image    = '@04@'.    " 접은 이미지
  node-exp_image  = '@05@'.    " 펼친 이미지
  APPEND node TO node_table.
  CLEAR node.

*-- gt_forcast를 순회하면서 각 노드를 생성해서 붙여주는 듯!
  LOOP AT gt_forcast INTO gs_forcast.
*--------------------------------------------------------------------*
    ON CHANGE OF gs_forcast-year_sd.
      MOVE gs_forcast-year_sd TO lv_year.

      lv_text = gs_forcast-year_sd.

      node-node_key  = gs_forcast-year_sd.
      node-relatkey  = 'ROOT'.
      node-isfolder  = 'X'.
*      node-n_image   = '@06@'.
*      node-exp_image = '@07@'.
      node-n_image   = '@04@'. " 접은 이미지
      node-exp_image = '@05@'. " 펼친 이미지
      node-text = lv_text.
      APPEND node TO node_table.
      CLEAR node.
    ENDON.
*--------------------------------------------------------------------*
    ON CHANGE OF gs_forcast-quart_sd.
      IF gs_forcast-quart_sd IS NOT INITIAL.
        node-node_key = gs_forcast-quart_sd.
        node-text = gs_forcast-quart_sd.
        node-relatkey = gs_forcast-year_sd.
        node-isfolder = 'X'.
        node-n_image   = '@04@'. " 접은 이미지
        node-exp_image = '@05@'. " 펼친 이미지
        APPEND node TO node_table.
        CLEAR: node.
      ENDIF.
    ENDON.

    IF gs_forcast-month_sd IS NOT INITIAL.
      node-node_key = gs_forcast-month_sd.
      node-text = gs_forcast-month_sd.
      node-relatkey = gs_forcast-quart_sd.
      node-isfolder = ' '.
      APPEND node TO node_table.
      CLEAR: node, gs_forcast.
    ENDIF.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_layout
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_layout .

  gs_layout = VALUE #( zebra      = abap_true
                     cwidth_opt = 'A'
                     sel_mode   = 'D' ).

ENDFORM.
*&---------------------------------------------------------------------*
*& Form display_chart
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_chart .

  PERFORM set_chart_data.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_chart_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_chart_data .

  CLEAR : go_ixml,
          go_ixml_sf,
          go_ixml_docu,
          go_ixml_ostream,
          go_ixml_encoding,
          go_chartdata,
          go_categories,
          go_category,
          go_series,
          go_point,
          go_value.

  CLEAR : gv_xstring.

  go_ixml = cl_ixml=>create(  ).
  go_ixml_sf = go_ixml->create_stream_factory( ).

  go_ixml_docu = go_ixml->create_document( ).

  go_ixml_encoding = go_ixml->create_encoding(
                       byte_order    = if_ixml_encoding=>co_little_endian
                       character_set = 'utf-8' ).

  go_ixml_docu->set_encoding( encoding = go_ixml_encoding ).

*-- Now build a DOM, representing an XML document with chart data
  go_chartdata = go_ixml_docu->create_simple_element(
                                        name   = 'ChartData'
                                        parent = go_ixml_docu ).

*-- Categories (parent)
  go_categories = go_ixml_docu->create_simple_element(
                                        name   = 'Categories'
                                        parent = go_chartdata ).

  PERFORM set_category_value.
  PERFORM set_chart_value.
  PERFORM design_mode.

  go_chart->set_data( xdata = gv_xstring ).
  go_chart->render( ).

ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_category_value
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_category_value .

  DATA : lv_value TYPE string.

*-- Categories (children)
  go_category = go_ixml_docu->create_simple_element(
                                        name   = 'Category'
                                        parent = go_categories ).
  go_category->if_ixml_node~set_value( 'Capacity' ). " SeatsMax


  go_category = go_ixml_docu->create_simple_element(
                                      name   = 'Category'
                                      parent = go_categories ).
  go_category->if_ixml_node~set_value( 'Occupied' ). " SeatsOcc


ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_chart_value
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_chart_value .

  DATA : lv_value TYPE string.

  LOOP AT gt_forcast INTO gs_forcast.

    lv_value = gs_forcast-month_sd.

*-- Build series (we need only 1)
    go_series = go_ixml_docu->create_simple_element(
                                                      name = 'Series'
                                                      parent = go_chartdata ).
    go_series->set_attribute( name  = 'label'
                              value = lv_value ). "'Series1' ).

*-- Seatsmax category
    lv_value = gs_forcast-mppos.

    go_point = go_ixml_docu->create_simple_element(
                                                    name = 'Point'
                                                    parent = go_series ).
    go_point->set_attribute( name  = 'label'
                             value = lv_value ).

    go_value = go_ixml_docu->create_simple_element(
                                                    name = 'Value'
                                                    parent = go_point ).

    go_value->if_ixml_node~set_value( lv_value ).

*-- Seatsocc category
    lv_value = gs_forcast-kwmeng.

    go_point = go_ixml_docu->create_simple_element(
                                                    name = 'Point'
                                                    parent = go_series ).
    go_point->set_attribute( name  = 'label'
                             value = lv_value ).

    go_value = go_ixml_docu->create_simple_element(
                                                    name = 'Value'
                                                    parent = go_point ).

    go_value->if_ixml_node~set_value( lv_value ).

  ENDLOOP.

*-- create ostream (into string variable) and render document into stream
  go_ixml_ostream = go_ixml_sf->create_ostream_xstring( gv_xstring ).
  go_ixml_docu->render( go_ixml_ostream ). "here f_xstring is filled

ENDFORM.
*&---------------------------------------------------------------------*
*& Form design_mode
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM design_mode .
**********************************************************************
* Chart type : Only Columns and Lines
**********************************************************************
  DATA: l_win_chart   TYPE REF TO cl_gui_chart_engine_win,
        g_design_mode.

  CATCH SYSTEM-EXCEPTIONS move_cast_error = 1.
    l_win_chart ?= go_chart->get_control( ).
  ENDCATCH.

  IF sy-subrc IS INITIAL.

    l_win_chart->set_design_mode( flag = g_design_mode event = 'X' ).
    l_win_chart->restrict_property_events( events = 'ChartType' ).

    l_win_chart->restrict_chart_types( charttypes = 'Lines' ).

  ENDIF.


ENDFORM.

----------------------------------------------------------------------------------
Extracted by Direct Download Enterprise version 1.3.1 - E.G.Mellodew. 1998-2005 UK. Sap Release 758
